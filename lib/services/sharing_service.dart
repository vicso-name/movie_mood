import 'package:share_plus/share_plus.dart';
import '../models/movie.dart';
import '../constants/strings.dart';

class SharingService {
  static Future<void> shareCollection({
    required Map<String, List<Movie>> favoritesByMood,
    required int totalMovies,
  }) async {
    if (totalMovies == 0) {
      // –ï—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞, —à–µ—Ä–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      await _shareInvitation();
      return;
    }

    final shareText = _buildCollectionShareText(favoritesByMood, totalMovies);

    await Share.share(
      shareText,
      subject: '${AppStrings.myCollection} ${AppStrings.appName}',
    );
  }

  static Future<void> _shareInvitation() async {
    final invitationText =
        '''üé¨ ${AppStrings.discoverMoviesByMood}

${AppStrings.imUsing} ${AppStrings.appName} - ${AppStrings.usingAppDescription}

‚ú® ${AppStrings.searchByMoodFeature}
üé≠ ${AppStrings.findByActorsFeature}  
üíæ ${AppStrings.buildWatchlistFeature}
üé≤ ${AppStrings.randomPicksFeature}

${AppStrings.download} ${AppStrings.appName} ${AppStrings.downloadAppTonight}''';

    await Share.share(invitationText);
  }

  static String _buildCollectionShareText(
    Map<String, List<Movie>> favoritesByMood,
    int totalMovies,
  ) {
    final buffer = StringBuffer();

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    buffer.writeln('üé¨ ${AppStrings.myCollection} ${AppStrings.appName}');
    buffer.writeln();
    buffer.writeln(
      '${AppStrings.curatedMoviesText} $totalMovies ${AppStrings.amazingMoviesOrganized}',
    );
    buffer.writeln();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
    buffer.writeln('üìä ${AppStrings.myMovieMoods}');
    for (final entry in favoritesByMood.entries) {
      final mood = entry.key;
      final count = entry.value.length;
      final emoji = _getMoodEmoji(mood);
      buffer.writeln(
        '$emoji $mood: $count ${count == 1 ? AppStrings.movie : AppStrings.movies}',
      );
    }
    buffer.writeln();

    // –¢–æ–ø-3 —Ñ–∏–ª—å–º–∞ (—Å–∞–º—ã–µ –≤—ã—Å–æ–∫–æ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ)
    final topMovies = _getTopMovies(favoritesByMood, 3);
    if (topMovies.isNotEmpty) {
      buffer.writeln('‚≠ê ${AppStrings.someOfMyFavorites}');
      for (int i = 0; i < topMovies.length; i++) {
        final movie = topMovies[i];
        buffer.writeln(
          '${i + 1}. ${movie.title} (${movie.year}) ‚≠ê ${movie.rating.toStringAsFixed(1)}',
        );
      }
      buffer.writeln();
    }

    // –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    buffer.writeln('üéØ ${AppStrings.wantToBuildCollection}');
    buffer.writeln(
      '${AppStrings.download} ${AppStrings.appName} ${AppStrings.discoverYourMood}',
    );

    return buffer.toString();
  }

  static List<Movie> _getTopMovies(
    Map<String, List<Movie>> favoritesByMood,
    int count,
  ) {
    final allMovies = <Movie>[];
    for (final movies in favoritesByMood.values) {
      allMovies.addAll(movies);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø
    allMovies.sort((a, b) => b.rating.compareTo(a.rating));
    return allMovies.take(count).toList();
  }

  static String _getMoodEmoji(String mood) {
    switch (mood.toLowerCase()) {
      case 'happy':
        return 'üòÑ';
      case 'romantic':
        return 'üíï';
      case 'sad':
        return 'üò¢';
      case 'cozy':
        return 'üè†';
      case 'inspiring':
        return '‚≠ê';
      case 'thrilling':
        return 'üî•';
      default:
        return 'üé¨';
    }
  }
}
