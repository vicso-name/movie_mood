import 'dart:async';
import 'dart:io';
import 'package:http/http.dart' as http;
import '../models/movie.dart';

class PosterValidationService {
  static final PosterValidationService _instance =
      PosterValidationService._internal();
  factory PosterValidationService() => _instance;
  PosterValidationService._internal();

  // –ö–µ—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö URL (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏)
  final Map<String, bool> _validationCache = {};

  // –õ–∏–º–∏—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
  static const Duration _requestTimeout = Duration(seconds: 5);
  static const int _maxConcurrentRequests = 3;

  // –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  int _activeRequests = 0;

  /// üî• –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  Future<bool> isImageUrlValid(String url) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (_validationCache.containsKey(url)) {
      return _validationCache[url]!;
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (_activeRequests >= _maxConcurrentRequests) {
      // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ
      return true;
    }

    try {
      _activeRequests++;

      // –î–µ–ª–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º GET)
      final response = await http
          .head(
            Uri.parse(url),
            headers: {'User-Agent': 'Mozilla/5.0 (compatible; MovieApp/1.0)'},
          )
          .timeout(_requestTimeout);

      final isValid =
          response.statusCode == 200 &&
          _isImageContentType(response.headers['content-type']);

      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _validationCache[url] = isValid;

      return isValid;
    } catch (e) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
      _validationCache[url] = false;
      return false;
    } finally {
      _activeRequests--;
    }
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  Future<List<Movie>> validateMoviePosters(
    List<Movie> movies, {
    Function(int current, int total)? onProgress,
  }) async {
    final validatedMovies = <Movie>[];

    for (int i = 0; i < movies.length; i++) {
      final movie = movies[i];

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      onProgress?.call(i + 1, movies.length);

      // –ï—Å–ª–∏ —É —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ URL - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (!movie.hasBasicPosterUrl) {
        print('‚ùå Skipping ${movie.title}: No basic poster URL');
        continue;
      }

      // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (movie.isPosterValidationCached) {
        if (movie.hasValidPoster) {
          validatedMovies.add(movie);
        } else {
          print('‚ùå Skipping ${movie.title}: Cached validation failed');
        }
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final isValid = await isImageUrlValid(movie.poster!);
      final validatedMovie = movie.copyWithPosterValidation(isValid);

      if (isValid) {
        validatedMovies.add(validatedMovie);
        print('‚úÖ Validated ${movie.title}: Poster OK');
      } else {
        print('‚ùå Skipping ${movie.title}: Poster validation failed');
        print('   URL: ${movie.poster}');
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < movies.length - 1) {
        await Future.delayed(const Duration(milliseconds: 100));
      }
    }

    print(
      'üéØ Poster validation complete: ${validatedMovies.length}/${movies.length} movies valid',
    );
    return validatedMovies;
  }

  /// üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
  List<Movie> validateMoviePostersSync(List<Movie> movies) {
    return movies.where((movie) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ URL - –∏—Å–∫–ª—é—á–∞–µ–º
      if (!movie.hasBasicPosterUrl) return false;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (movie.isPosterValidationCached) {
        return movie.hasValidPoster;
      }

      // –ï—Å–ª–∏ URL –≤ –Ω–∞—à–µ–º –∫–µ—à–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º
      if (_validationCache.containsKey(movie.poster)) {
        final isValid = _validationCache[movie.poster!]!;
        movie.setPosterValidation(isValid);
        return isValid;
      }

      // –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º (–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∑–∂–µ)
      return true;
    }).toList();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  bool _isImageContentType(String? contentType) {
    if (contentType == null) return false;
    return contentType.startsWith('image/');
  }

  /// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  void clearCache() {
    _validationCache.clear();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
  Map<String, dynamic> getCacheStats() {
    final total = _validationCache.length;
    final valid = _validationCache.values.where((v) => v).length;

    return {
      'total_checked': total,
      'valid_posters': valid,
      'invalid_posters': total - valid,
      'cache_hit_rate': total > 0
          ? (valid / total * 100).toStringAsFixed(1)
          : '0.0',
    };
  }
}
